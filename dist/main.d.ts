import { Contract } from 'web3/node_modules/web3-eth-contract';
import Puppet from './puppet';
import { L2_CB, L2_EVENT } from './utils/constants';
import L2Session from './session';
export declare let cita: any;
export declare let web3_10: any;
export declare let web3_outer: any;
export declare let ethPN: Contract;
export declare let ERC20: Contract;
export declare let appPN: Contract;
export declare let appSession: Contract;
export declare let appOperator: Contract;
export declare let callbacks: Map<L2_EVENT, L2_CB>;
export declare let user: string;
export declare let l2: string;
export declare let cp: string;
export declare let puppet: Puppet;
export declare let debug: boolean;
export declare class L2 {
    private static _instance;
    private initialized;
    private ethWatcher;
    private appWatcher;
    private constructor();
    static getInstance(): L2;
    init(userAddress: string, outerWeb3: any, ethPaymentNetworkAddress: string, appRpcUrl: string, appPaymentNetworkAddress: string, appSessionAddress: string): Promise<boolean>;
    setDebug(debugFlag: boolean): Promise<void>;
    submitERC20Approval(amount: string | number, token: any): Promise<string>;
    deposit(amount: string | number, token?: string): Promise<string>;
    withdraw(amount: string | number, token?: string, receiver?: string): Promise<string>;
    cancelWithdraw(token?: string): Promise<string>;
    forceWithdraw(token?: string): Promise<string>;
    transfer(to: string, amount: string | number, token?: string): Promise<string>;
    startSession(sessionID: string): Promise<L2Session>;
    getSessionBySessionID(sessionID: string): Promise<L2Session>;
    getMessagesBySessionID(sessionID: string): Promise<any[]>;
    getPlayersBySessionID(sessionID: string): Promise<string[]>;
    getBalance(token?: string): Promise<string>;
    getChannelInfo(token?: string): Promise<any>;
    getAllTXs(token?: string): Promise<any>;
    getEthTxReceipt(txHash: string): Promise<boolean>;
    isNewUser(): Promise<boolean>;
    getAllPuppets(): Promise<Array<any>>;
    disablePuppet(puppet: string): Promise<string>;
    getOnchainBalance(token?: string): Promise<any>;
    getERC20Allowance(owner: string, spender: string, token: string): Promise<any>;
    on(event: L2_EVENT, callback: L2_CB): void;
    private checkInitialized;
    private depositERC20Token;
    initPuppet(): Promise<void>;
    private initListeners;
    private initMissingEvent;
}
export default L2;
